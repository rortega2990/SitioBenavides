
@*@{
    ViewBag.Title = "SearchLandingNo7";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>SearchLandingNo7</h2>*@




@model BenavidesFarm.DataModels.Models.Pages.BranchPage
@{
    ViewBag.Title = "SearchLandingNo7";
    BenFarms.MVC.Models.BranchSearchResultViewModel viewModel = ViewBag.SearchResults;
}

@helper DisplayBranch(BenFarms.MVC.Models.BranchViewModel branch, bool isVisible = false)
{
var name = string.Format("name-{0}", branch.Id);
var address = string.Format("address-{0}", branch.Id);

var linkClasses = "branch-offices-name ";
var addressClasses = "margin-bottom-10 branch-offices-address ";
if (isVisible == false)
{
    linkClasses += "inactive";
    addressClasses += "hidden";
}
else
{
    linkClasses += "active";
}
    <div style="text-align:left">
        <div>
            <a href="javascript:void(0)" id="@name" class="@linkClasses"
               latitude="@branch.Latitude" longitude="@branch.Longitude"
               data-name="@branch.Name" data-address="@branch.Address" data-city="@branch.City" data-state="@branch.State" data-hour="@branch.Hour"><b>@branch.Name</b></a>
        </div>
        <div id="@address" class="@addressClasses" latitude="@branch.Latitude"
             longitude="@branch.Longitude">
            @branch.Address
        </div>
    </div>
}


@helper DisplayBranches(List<BenFarms.MVC.Models.BranchViewModel> branches)
{
var count = branches.Count;
if (count > 0)
{
        @DisplayBranch(branches[0], true);
        for (int i = 1; i < count; i++)
        {
            @DisplayBranch(branches[i], false);
        }
    }
}

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA-CRfk8RhTz7Lsu9OEhUTsILKokv2sHfE&sensor=true">
</script>
<link href="~/Content/css/ben.css" rel="stylesheet" />
<div id="main-carousel" class="carousel slide" data-ride="carousel">
    <ol class="carousel-indicators">
        <li data-target="#carousel-id" data-slide-to="0" class="active"></li>
    </ol>
    <div class="carousel-inner">
        @{
            <div class="item active">
                <img src="@Url.Content(Model.HeadImages[0].ImageSectionImage)">
                <div class="container">
                    @{
                        var color1 = "#000000";
                        if (!string.IsNullOrEmpty(Model.HeadImages[0].ImageSectionColorText))
                        {
                            color1 = Model.HeadImages[0].ImageSectionColorText;
                        }
                    }
                    <div class="carousel-caption">
                        @*<h1 style="color: @Html.Raw(color1)">@Model.HeadImages[0].ImageSectionText</h1>*@
                    </div>
                </div>
            </div>
                        for (int i = 1; i < Model.HeadImages.Count; i++)
                        {
                            var color = "#000000";
                            if (!string.IsNullOrEmpty(Model.HeadImages[i].ImageSectionColorText))
                            {
                                color = Model.HeadImages[i].ImageSectionColorText;
                            }
                            <div class="item">
                                <img src="@Url.Content(Model.HeadImages[i].ImageSectionImage)">
                                <div class="container">
                                    <div class="carousel-caption">
                                        @*<h1 style="color: @Html.Raw(color)">@Model.HeadImages[i].ImageSectionText</h1>*@
                                    </div>
                                </div>
                            </div>
                        }
        }
    </div>
    <a class="left carousel-control" href="#carousel-id" data-slide="prev"><span class="glyphicon glyphicon-chevron-left"></span></a>
    <a class="right carousel-control" href="#carousel-id" data-slide="next"><span class="glyphicon glyphicon-chevron-right"></span></a>
</div>



<div class="container-fluid margin-bottom-200 no-padding">
    <div class="row full-width">
        <div id="branch-offices" class="col-xs-12 col-sm-6 col-md-6 text-right" name="branch-offices" style="height: 550px; overflow-y:auto">
            <div id="header-branch-offices" class="margin-bottom-20">
                @*<h3 class="no-margin" style="text-align:left">
                    <span class="color-blue">
                        <b>
                            @if (viewModel.DoctorOfficeCriteriaEnabled == true && viewModel.TwentyFourHoursCriteriaEnabled == true)
                            {
                                @: Sucursales 24 hrs con Consultorio Médico
                            }
                            else
                            {
                                if (viewModel.TwentyFourHoursCriteriaEnabled == true)
                                {
                                    @: Sucursales 24 hrs
                                }
                                else
                                {
                                    @: Sucursales con Consultorio Médico
                                }
                            }
                        </b>
                    </span>
                </h3>*@

                <h3 class="no-margin" style="text-align:left">Selecciona tu Sucursal</h3>
</div>


            @if (viewModel.Branches.Count == 0)
            {
                <h3 class="no-margin" style="text-align:left">
                    <b>No se encontraron sucursales</b>
                </h3>
            }
            else
            {
                @DisplayBranches(viewModel.Branches);
            }

            <br />

            <h4 class="color-blue">
                @Html.ActionLink("Nueva búsqueda", "landingno7", null, new { @class = "color-blue" })
            </h4>

        </div>
        <div class="col-xs-12 col-sm-6 col-md-6 full-width margin-bottom-40">
            <div id="map_canvas" style="height: 550px;"></div>
            @*<img src="~/Content/rsc/imgs/gmap.png" alt="" class="img-responsive">*@
        </div>
    </div>
</div>



@section scripts {
    <section class="scripts">

        <script type="text/javascript">

            $(document).ready(function() {
                Initialize();
            });

            //function chargecities

            // Where all the fun happens

            function Initialize() {

                var dataArray = [];
                //var base = GetUrlBase();
                var base = getSiteRootUrl();
                var map = null;
                var linkList = $("a[id^=name-]");

                if (typeof google != 'undefined') {
                    // Google has tweaked their interface somewhat - this tells the api to use that new UI
                    google.maps.visualRefresh = true;
                    //var Tunisie = new google.maps.LatLng(25.67507, -100.31847);

                    // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                    var mapOptions = {
                        zoom: 5,
                        center: { lat: 23.67507, lng: -96.31847 },
                        mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
                    };

                    // This makes the div with id "map_canvas" a google map
                    var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
                    if (navigator.geolocation) {
                        if (linkList.length == 0) {
                            mostrarMensaje("obteniendo posición...");
                            navigator.geolocation.getCurrentPosition(function(pos, z) {
                                map.setCenter(new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude));
                                var marker = new google.maps.Marker({
                                    position: new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude),
                                    map: map,
                                    title: "Tu posición"
                                });
                                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');
                                ocultarMensaje();
                            }, errorPosicionar);
                        }
                    } else {
                        mostrarMensaje('Tu navegador no soporta geolocalización');
                    }
                }

                var locateAndCenterInMap = function(data, zoom) {
                    map.setCenter(new google.maps.LatLng(data.latitude, data.longitude));
                    map.setZoom(zoom);
                    var marker = new google.maps.Marker({
                        'position': new google.maps.LatLng(data.latitude, data.longitude),
                        'map': map,
                        'title': name
                    });

                    marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');

                    var infowindow = new google.maps.InfoWindow({
                        content: "<div class='infoDiv' style='width: 200px; height: 300px;'><h4>" + data.name + "</h4><hr/><b>Dirección: </b>" + data.address + "<br/><b>Ciudad: </b>" + data.city + "</br><b>Estado: </b>" + data.state + "</br><b>Horario: </b>" + data.hour + "</div>"
                    });

                    google.maps.event.addListener(marker, 'click', function() {
                        infowindow.open(map, marker);
                    });
                };
                var extractDOMElementAttributesForMap = function(target) {
                    var latitudeData = target.getAttribute("latitude");
                    var longitudeData = target.getAttribute("longitude");
                    var nameData = target.getAttribute("data-name");
                    var addressData = target.getAttribute("data-address");
                    var cityData = target.getAttribute("data-city");
                    var stateData = target.getAttribute("data-state");
                    var hourData = target.getAttribute("data-hour");

                    return { latitude: latitudeData, longitude: longitudeData, name: nameData, address: addressData, city: cityData, state: stateData, hour: hourData };
                };


                linkList.on("click", function(eventInformation) {
                    if (typeof google != 'undefined') {
                        var target = eventInformation.currentTarget;
                        var data = extractDOMElementAttributesForMap(target);
                        locateAndCenterInMap(data, 18);
                        eventInformation.preventDefault();
                    }
                });

                if (linkList.length > 0) {
                    var firtLink = $(linkList[0]);
                    firtLink.trigger("click");
                }

                //geoposicionar();

                $.getJSON(base + '/api/v1/branches/GetNo7', function (data) {
                    $.each(data, function(i, suc) {
                        var horario = "";
                        if (suc.BranchHour1 != null && suc.BranchHour2 != null) {
                            if (suc.BranchHour1 == "12:00 AM" && suc.BranchHour2 == "12:00 PM") {
                                horario = "24 Horas";
                            } else {
                                horario = suc.BranchHour1 + " a " + suc.BranchHour2;
                            }
                        }
                      dataArray[i] = { "Id": suc.BranchId, "PlaceName": suc.BranchName, "GeoLong": suc.BranchLongitude, "GeoLat": suc.BranchLatitude, "Address": suc.BranchAddress, "City": suc.City.Name, "State": suc.State.Name, "Hour": horario }
                });
                $.each(dataArray, function(i, item) {
                    var marker = new google.maps.Marker({
                        'position': new google.maps.LatLng(item.GeoLat, item.GeoLong),
                        'map': map,
                        'title': item.PlaceName


                    });

                    // Make the marker-pin blue!
                    marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');

                    // put in some information about each json object - in this case, the opening hours.
                    var infowindow = new google.maps.InfoWindow({
                        content: "<div class='infoDiv' style='width: 200px; height: 300px;'><h4>" + item.PlaceName + "</h4><hr/><b>Dirección: </b>" + item.Address + "<br> <b>Ciudad: </b>" + item.City + "<br> <b>Estado: </b>" + item.State + " <br><b>Horario: </b>" + item.Hour + "<br></div>"
                    });

                    // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
                    google.maps.event.addListener(marker, 'click', function() {
                        infowindow.open(map, marker);
                    });

                });
            }

            )
            ;


            // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins


            }

            /***********************************************
                En esta función se hace la solicitud de geolocalización y el primer
                control para ver si el navegador soporta el servicio
            ***********************************************/

            function geoposicionar(map) {

                if (navigator.geolocation) {
                    mostrarMensaje("obteniendo posición...");
                    navigator.geolocation.getCurrentPosition(centrarMapa, errorPosicionar);
                } else {
                    mostrarMensaje('Tu navegador no soporta geolocalización');
                }
            }

            /***********************************************
                Control de errores en caso de que la llamada
                navigator.geolocation.getCurrentPosition(centrarMapa,errorPosicionar);
                termine generando un error
            ***********************************************/

            function errorPosicionar(error) {
                switch (error.code) {
                case error.TIMEOUT:
                    mostrarMensaje('Request timeout');
                    break;
                case error.POSITION_UNAVAILABLE:
                    mostrarMensaje('Tu posición no está disponible');
                    break;
                case error.PERMISSION_DENIED:
                    mostrarMensaje('Tu navegador ha bloqueado la solicitud de geolocalización');
                    break;
                case error.UNKNOWN_ERROR:
                    mostrarMensaje('Error desconocido');
                    break;
                }
            }

            /***********************************************
                Esta función se ejecuta si la llamada a  navigator.geolocation.getCurrentPosition
                tiene éxito. La latitud y la longitud vienen dentro del objeto coords.
            ***********************************************/

            function centrarMapa(pos, z) {
                map.setZoom(10);
                map.setCenter(new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude));
                var marker = new google.maps.Marker({
                    position: new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude),
                    map: map,
                    title: "Tu posición"
                });
                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');
                ocultarMensaje();
            }

            /***********************************************
                Gestión de mensajes
            ***********************************************/

            function mostrarMensaje(str) {
                $('#texto').html(str);
                $('#capa_mensajes').css({ "visibility": "visible" });
            }

            function ocultarMensaje() {
                $('#capa_mensajes').css({ "visibility": "hidden" });
            }

        </script>
    </section>
}