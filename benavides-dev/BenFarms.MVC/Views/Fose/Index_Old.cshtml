@model BenavidesFarm.DataModels.Models.Pages.FosePage
@{
    ViewBag.Title = "Boots Beauty Brands";
    ViewBag.Page = "Fose";
}

@*<style>
    #map_canvas img {
        max-width: none;
    }
</style>*@

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
@*<style>
        .infoDiv {
            height: 70px;
            width: 140px;
            -webkit-user-select: none;
            background-color: white; 
        }
    </style>*@

@*async defer*@
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDFUAYfKlQ6d_nkbtujLyGHLeEE3go0kAo&sensor=true">
</script>

<div id='main' role='main'>
    <div id="main-carousel" class="carousel slide" data-ride="carousel">
        <ol class="carousel-indicators">
            <li data-target="#carousel-id" data-slide-to="0" class="active"></li>
        </ol>
        <div class="carousel-inner">
            @{
                <div class="item active">
                <img src="@Url.Content(Model.HeadImages[0].ImageSectionImage)">
                <div class="container">
                    @{
                        var color1 = "#000000";
                        if (!string.IsNullOrEmpty(Model.HeadImages[0].ImageSectionColorText))
                        {
                            color1 = Model.HeadImages[0].ImageSectionColorText;
                        }
                    }
                    <div class="carousel-caption">
                        <h1 style="color: @Html.Raw(color1)">@Model.HeadImages[0].ImageSectionText</h1>
                    </div>
                </div>
            </div>
                for (int i = 1; i < Model.HeadImages.Count; i++)
                {
                    var color = "#000000";
                    if (!string.IsNullOrEmpty(Model.HeadImages[i].ImageSectionColorText))
                    {
                        color = Model.HeadImages[i].ImageSectionColorText;
                    }
                    <div class="item">
                        <img src="@Url.Content(Model.HeadImages[i].ImageSectionImage)">
                        <div class="container">
                            <div class="carousel-caption">
                                <h1 style="color: @Html.Raw(color)">@Model.HeadImages[i].ImageSectionText</h1>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        @*<a class="left carousel-control" href="#carousel-id" data-slide="prev"><span class="glyphicon glyphicon-chevron-left"></span></a>
        <a class="right carousel-control" href="#carousel-id" data-slide="next"><span class="glyphicon glyphicon-chevron-right"></span></a>*@
    </div>

    <div class="container-fluid no-padding">
        <div id="localization-text" class="col-sm-6 col-xs-12 localizacion valign-wrapper">
            <p>@Html.Raw(Model.FoseTextBranch)</p>
        </div>
        <div class="col-sm-6 col-xs-12 no-padding localizacion">
            <div id="map_canvas" style="height: 550px;"></div>
            @*<img src="~/Content/rsc/imgs/gmap-1.jpg" class="img-responsive img-promo">*@
        </div>
        <div class="clearfix"></div>
    </div>
    <div class="clearfix"></div>

    <div class="container-fluid no-padding no-margin">
        @{
            foreach (var p in Model.Promocions)
            {
                //var url = ;
                <a href="@Url.Action("Products", "Fose", new{id=p.PromocionPageId})"><img src="@Url.Content(p.PromocionPageHeadImage)" class="img-responsive img-promo"></a>

                @*<img src="@Url.Content(p.PromocionPageHeadImage)" class="img-responsive img-promo">*@


            }
        }
    </div>
</div>

@section scripts {
    <section class="scripts">

        <script type="text/javascript">

            function equalCols() {
                var _screenWidth = $(window).innerWidth();
                var _numcols = 3; //para resoluciones mayores a 992
                if (_screenWidth < 768) _numcols = 1;
                if (992 > _screenWidth >= 768) _numcols = 2;

                var _elements = $('.localizacion'); //el elemento que rige la altura de la caja
                var _arr = $.makeArray(_elements);  //para manipular el arreglo de objetos
                for (var i = 0; i < _arr.length; i += _numcols) {  //iterando de acuerdo a la cantidad de columnas a mostrar
                    var tallestHeight = 0;
                    if ($(_arr[i]).height() > tallestHeight) {
                        tallestHeight = $(_arr[i]).height();
                    }
                    for (var j = 1; j < _numcols; j++) { //este ciclo es para ver la altura de los demas elementos de la fila
                        if ($(_arr[i + j]).height() > tallestHeight) {
                            tallestHeight = $(_arr[i + j]).height();
                        }
                    }

                    $(_arr[i]).height(tallestHeight);   //le asigno la altura mayor al primer elemento de la fila
                    for (var y = 1; y < _numcols; y++) { //le voy asignando la mayor altura al resto de la fila
                        $(_arr[i + y]).height(tallestHeight);
                    }
                }
            };

            $(document).ready(function () {
                
                equalCols();
                $(window).resize(function () { equalCols() });

                Initialize();
            });

            // Where all the fun happens
            function Initialize() {

                var dataArray = [];
                var base = getSiteRootUrl();

                // Google has tweaked their interface somewhat - this tells the api to use that new UI
               google.maps.visualRefresh = true;
                //var Tunisie = new google.maps.LatLng(25.67507, -100.31847);

                // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                var mapOptions = {
                    zoom: 10,
                    center: { lat: 25.67507, lng: -100.31847 },
                    mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
                };

                // This makes the div with id "map_canvas" a google map
                var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
                if (navigator.geolocation) {
                    console.log(navigator.geolocation);
                    mostrarMensaje("obteniendo posición...");
                    navigator.geolocation.getCurrentPosition(function (pos, z) {
                        map.setZoom(10);
                        map.setCenter(new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude));
                        var marker = new google.maps.Marker({
                            position: new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude),
                            map: map,
                            title: "Tu posición"
                        });
                        marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');
                        ocultarMensaje();
                    }, errorPosicionar);
                } else {
                    mostrarMensaje('Tu navegador no soporta geolocalización');
                }


                //geoposicionar();

                $.getJSON(base + '/api/v1/branches/Fose', function (data) {
                    $.each(data, function (i, suc) {
                        dataArray[i] = { "Id": suc.BranchId, "PlaceName": suc.BranchName, "GeoLong": suc.BranchLongitude, "GeoLat": suc.BranchLatitude, "Address": suc.BranchAddress, "City": suc.City.Name, "Hour": suc.BranchHour }
                    });
                    $.each(dataArray, function (i, item) {
                        var marker = new google.maps.Marker({
                            'position': new google.maps.LatLng(item.GeoLat, item.GeoLong),
                            'map': map,
                            'title': item.PlaceName
                        });

                        // Make the marker-pin blue!
                        marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');

                        // put in some information about each json object - in this case, the opening hours.
                        var infowindow = new google.maps.InfoWindow({
                            content: "<div class='infoDiv' style='width: 200px; height: 300px;'><h1>" + item.PlaceName + "</h1><hr/><b>Dirección: </b>" + item.Address + "<br> <b>Ciudad: </b>" + item.City + " <br><b>Horario: </b>" + item.Hour + "<br></div>"
                        });

                        // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
                        google.maps.event.addListener(marker, 'click', function () {
                            infowindow.open(map, marker);
                        });

                    });
                });

                // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins


            }

            /***********************************************
                En esta función se hace la solicitud de geolocalización y el primer
                control para ver si el navegador soporta el servicio
            ***********************************************/

            function geoposicionar(map) {

                if (navigator.geolocation) {
                    mostrarMensaje("obteniendo posición...");
                    navigator.geolocation.getCurrentPosition(centrarMapa, errorPosicionar);
                } else {
                    mostrarMensaje('Tu navegador no soporta geolocalización');
                }
            }

            /***********************************************
                Control de errores en caso de que la llamada
                navigator.geolocation.getCurrentPosition(centrarMapa,errorPosicionar);
                termine generando un error
            ***********************************************/

            function errorPosicionar(error) {
                switch (error.code) {
                    case error.TIMEOUT:
                        mostrarMensaje('Request timeout');
                        break;
                    case error.POSITION_UNAVAILABLE:
                        mostrarMensaje('Tu posición no está disponible');
                        break;
                    case error.PERMISSION_DENIED:
                        mostrarMensaje('Tu navegador ha bloqueado la solicitud de geolocalización');
                        break;
                    case error.UNKNOWN_ERROR:
                        mostrarMensaje('Error desconocido');
                        break;
                }
            }

            /***********************************************
                Esta función se ejecuta si la llamada a  navigator.geolocation.getCurrentPosition
                tiene éxito. La latitud y la longitud vienen dentro del objeto coords.
            ***********************************************/

            function centrarMapa(pos, z) {
                map.setZoom(10);
                map.setCenter(new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude));
                var marker = new google.maps.Marker({
                    position: new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude),
                    map: map,
                    title: "Tu posición"
                });
                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');
                ocultarMensaje();
            }

            /***********************************************
                Gestión de mensajes
            ***********************************************/

            function mostrarMensaje(str) {
                $('#texto').html(str);
                $('#capa_mensajes').css({ "visibility": "visible" });
            }

            function ocultarMensaje() {
                $('#capa_mensajes').css({ "visibility": "hidden" });
            }

        </script>
    </section>
}