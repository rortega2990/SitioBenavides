@model BenFarms.MVC.Areas.Admin.Models.BranchInputModel

@{
    ViewBag.Title = "Editar Sucursal";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    ViewBag.Page = "BranchActive";
    var states = (IEnumerable<SelectListItem>)ViewBag.States;
}
    <h2>Editar Sucursal</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.BranchId)

        <div class="form-horizontal">
            <h4>Sucursal</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.BranchName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.BranchName, new { @class = "form-control", placeholder = "Nombre", required = true })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.BranchRegion, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.BranchRegion, new { @class = "form-control", placeholder = "Región" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BranchCeco, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.BranchCeco, new { @class = "form-control", placeholder = "Ceco" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BranchSap, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.BranchSap, new { @class = "form-control", placeholder = "SAP" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BranchAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.TextAreaFor(model => model.BranchAddress, new { @class = "form-control", placeholder = "Dirección", required = true })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.DropDownListFor(model => model.State, states, new { @class = "form-control", id = "select-states" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    <select id="select-cities" class="form-control" name="City" data-current-value="@Model.City"></select>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BranchConsult, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.CheckBoxFor(model => model.BranchConsult, new { @class="form-control"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BranchTwentyFourHours, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.CheckBoxFor(model => model.BranchTwentyFourHours, new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BranchFose, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.CheckBoxFor(model => model.BranchFose, new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BranchHour1, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.BranchHour1, htmlAttributes: new { @class = "form-control timepicker timepicker-no-seconds" })
                </div>
                
                <div class="col-md-2">
                    @Html.TextBoxFor(model => model.BranchHour2, htmlAttributes: new { @class = "form-control timepicker timepicker-no-seconds" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BranchLatitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.BranchLatitude, new { @class = "form-control", required = true })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BranchLongitude, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.BranchLongitude, new { @class = "form-control", required = true })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BranchActive, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-6">
                    @Html.EditorFor(model => model.BranchActive)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-6">
                    <button type="submit" class="btn blue">Aceptar</button>
                    @Html.ActionLink("Cancelar", "Index", null, htmlAttributes: new { @class = "btn default" })
                </div>
            </div>
        </div>
    }



@section scripts{
    <section class="scripts">

        <script type="text/javascript">
        $(function () {
            var base = getSiteRootUrl();
            statesSelect = $("#select-states");
            citiesSelect = $("#select-cities");


            var replaceComboBoxItems = function (targetJQueryObject, data, options) {
                targetJQueryObject.empty();
                if (options.customText)
                {
                    var markup = "<option value='0'>" + options.customText + "</option>";
                }
                for (var i = 0; i < data.length; i++) {
                    markup += "<option value=" + data[i][options.value] + ">" + data[i][options.text] + "</option>";
                }

                targetJQueryObject.html(markup).show();
            };


            statesSelect.on("change", function () {
                var stateId = this.value;
                $.ajax({
                    url: base + '/Branch/GetCities/' + stateId,
                    data: { state: stateId },
                    cache: false,
                    type: "GET",
                    async: true,
                    success: function (data) {
                        var options = {
                            value: "Value",
                            text: "Text",
                            customText: "Seleccione Ciudad"
                        };
                        

                        replaceComboBoxItems(citiesSelect, data, options);

                        var currentCity = citiesSelect.attr('data-current-value');
                        console.log("Current state: " + currentCity);
                        if(currentCity > 0)
                        {
                            citiesSelect.val(currentCity);
                        }
                    },
                    error: function (reponse) {
                       // alert("error : " + reponse);
                    }
                });
            });

            statesSelect.trigger("change");
        });
        </script>

    </section>
}


